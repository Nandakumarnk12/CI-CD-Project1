def COLOR_MAP = [
    'SUCCESS': 'good',
    'FAILURE': 'danger'
]
pipeline {
    agent any
    environment {
        SCANNER_HOME = tool 'sonarqube'
    }
    stages {
        stage('git checkout') {
            steps {
                git 'https://github.com/Sushmaa123/Java-Springboot.git'
            }
        }
        stage('compile') {
            steps {
                sh 'mvn compile'
            }
        }
        stage('code analysis') {
            steps {
                script {
                    echo "SCANNER_HOME path: $SCANNER_HOME"
                    withSonarQubeEnv('sonarqube') {  // Using 'sonarqube' as per your configuration
                        sh '''
                        $SCANNER_HOME/bin/sonar-scanner -X \
                            -Dsonar.projectName=Java-Springboot \
                            -Dsonar.java.binaries=. \
                            -Dsonar.projectKey=Java-Springboot \
                            -Dsonar.host.url=http://18.222.237.138:9000 \
                            -Dsonar.login=sanjay-token
                        '''
                    }
                }
            }
        }
        stage('package') {
            steps {
                sh 'mvn install'
            }
        }
        stage('docker build') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                        sh 'docker build -t spring-boot .'
                    }
                }
            }
        }
        stage('docker compose') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                        sh 'docker-compose up -d'
                    }
                }
            }
        }
    }
 
    post {
        always {
            echo 'slack Notification.'
            slackSend channel: '#ci-cd-java',
                      color: COLOR_MAP[currentBuild.currentResult],
                      message: "*${currentBuild.currentResult}:* Job ${env.JOB_NAME} build ${env.BUILD_NUMBER} \n More info at: ${env.BUILD_URL}"
        }
    }
}
